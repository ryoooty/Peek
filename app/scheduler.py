# app/scheduler.py
from __future__ import annotations

import datetime as dt
import random
from typing import Optional, Dict, List

from aiogram import Bot
from app import storage, runtime
from app.config import settings


# APScheduler ‚Äî –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ (–±–µ–∑ SQLAlchemyJobStore, —á—Ç–æ–±—ã –Ω–µ —Ç—Ä–µ–±–æ–≤–∞—Ç—å SQLAlchemy)
try:
    from apscheduler.schedulers.asyncio import AsyncIOScheduler  # type: ignore
    from apscheduler.jobstores.sqlalchemy import SQLAlchemyJobStore  # type: ignore
except Exception:
    AsyncIOScheduler = None  # type: ignore
    SQLAlchemyJobStore = None  # type: ignore

"""
–õ–û–ì–ò–ö–ê (–±–µ–∑ ¬´–æ–∫–æ–Ω¬ª):
‚Äî –ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –ò–ò –ø–ª–∞–Ω–∏—Ä—É–µ–º ¬´–ø—Ä–æ–≤–µ—Ä–∫—É —Ç–∏—à–∏–Ω—ã¬ª —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç.
‚Äî –ï—Å–ª–∏ —Ç–∏—à–∏–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –≥–µ–Ω–µ—Ä–∏–º N —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç–∞–π–º–∏–Ω–≥–æ–≤ –Ω–∞ 24 —á–∞—Å–∞ –≤–ø–µ—Ä—ë–¥ (N = pro_per_day, –¥–µ—Ñ–æ–ª—Ç 2).
‚Äî –¢–∞–π–º–∏–Ω–≥–∏ –∂–∏–≤—É—Ç –∫–∞–∫ date‚Äëjobs –≤ APScheduler (in‚Äëmemory, –±–µ–∑ –ø–µ—Ä—Å–∏—Å—Ç–∞).
‚Äî –í –º–æ–º–µ–Ω—Ç —Ç–∞–π–º–∏–Ω–≥–∞:
   * –±–µ—Ä—ë–º –ê–ö–¢–£–ê–õ–¨–ù–´–ô ¬´–ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Ç¬ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –ø–æ–º–µ–Ω—è–ª—Å—è ‚Äî —à–ª—ë–º —É–∂–µ –µ–º—É);
   * –µ—Å–ª–∏ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å <5 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥ ‚Äî –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ (now..+24h);
   * —É–≤–∞–∂–∞–µ–º min_gap (–¥–µ—Ñ–æ–ª—Ç 10 –º–∏–Ω—É—Ç) –æ—Ç last_proactive_at;
   * –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ domain proactive_nudge; —É—Å–ø–µ—à–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ —Å—á–∏—Ç–∞–µ–º –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ domain/storage.
‚Äî ¬´–ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ¬ª —Ç–∞–π–º–∏–Ω–≥–∏ (–±–æ—Ç –±—ã–ª –æ—Ñ–ª–∞–π–Ω) –Ω–µ –≤—Å–ø–ª—ã–≤—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –Ω–æ –ø—Ä–∏ –±–ª–∏–∂–∞–π—à–µ–π ¬´—Ç–∏—à–∏–Ω–µ¬ª —Å–≥–µ–Ω–µ—Ä–∏–º –Ω–æ–≤—ã–π —Å—É—Ç–æ—á–Ω—ã–π –ø–ª–∞–Ω.
"""

# ---------------- Globals ----------------

_scheduler: Optional["AsyncIOScheduler"] = None
_bot: Optional[Bot] = None

# –î–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è: —Ö—Ä–∞–Ω–∏—Ç—å ID –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∂–æ–±–æ–≤ (—á—Ç–æ–±—ã –∑–Ω–∞—Ç—å, –µ—Å—Ç—å –ª–∏ –ø–ª–∞–Ω —É —é–∑–µ—Ä–∞)
_user_jobs: Dict[int, List[str]] = {}  # user_id -> [job_id,...]


# ---------------- Public API ----------------


def init(bot: Bot) -> None:
    """
    –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö —Ç–∏–∫–æ–≤.
    –ë–µ–∑ SQLAlchemyJobStore ‚Äî –Ω–∏—á–µ–≥–æ —Å—Ç–∞–≤–∏—Ç—å/—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.
    """
    global _scheduler, _bot
    _bot = bot
    if AsyncIOScheduler is None:
        # APScheduler –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚Äî —Ç–∏—Ö–æ –¥–µ–≥—Ä–∞–¥–∏—Ä—É–µ–º
        return

    _scheduler = AsyncIOScheduler(timezone=dt.timezone.utc)
    _scheduler.start()
    runtime.set_scheduler(_scheduler)

    # –ï–∂–µ–º–∏–Ω—É—Ç–Ω—ã–π —Ç–∏–∫ –Ω–∞ —Å–ª—É—á–∞–π –ø–æ–¥–≤–∏—Å—à–∏—Ö/–∑–∞–±—ã—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:

    # –ï—Å–ª–∏ —É —é–∑–µ—Ä–∞ –≤–∫–ª—é—á—ë–Ω Live –∏ –Ω–µ—Ç –±—É–¥—É—â–∏—Ö –¥–∂–æ–± ‚Äî —Å–æ–∑–¥–∞–¥–∏–º —Å—É—Ç–æ—á–Ω—ã–π –ø–ª–∞–Ω.
    _add_job("proactive:tick", "interval", minutes=1, func=_tick_fill_plans)
    _add_job("bonus:daily", "cron", hour=0, minute=5, func=_daily_bonus)
    _add_job("subs:expire", "cron", hour=0, minute=10, func=_subs_expire)


def shutdown() -> None:
    if _scheduler:
        try:
            _scheduler.shutdown(wait=False)
        except Exception:
            pass


def schedule_silence_check(user_id: int, chat_id: int, delay_sec: int = 600) -> None:
    """
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ —á–∞—Ç–∞: –ø–æ—Å—Ç–∞–≤–∏—Ç—å ¬´–ø—Ä–æ–≤–µ—Ä–∫—É —Ç–∏—à–∏–Ω—ã¬ª —á–µ—Ä–µ–∑ delay_sec (–¥–µ—Ñ–æ–ª—Ç 10 –º–∏–Ω—É—Ç).
    """
    if not _scheduler:
        return

    # —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∂–æ–±—ã —Ç–∏—à–∏–Ω—ã —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        for j in list(_scheduler.get_jobs()):  # type: ignore
            if j.id and j.id.startswith(f"silence:{user_id}:"):
                try:
                    _scheduler.remove_job(j.id)
                except Exception:
                    pass
    except Exception:
        pass

    run_at = dt.datetime.utcnow() + dt.timedelta(seconds=int(delay_sec))
    jid = f"silence:{user_id}:{int(run_at.timestamp())}"
    _add_job(jid, "date", run_date=run_at, func=_on_silence, args=(user_id, chat_id))
    _user_jobs[user_id] = [jid]

def rebuild_user_jobs(user_id: int) -> None:
    """–ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –∏–ª–∏ –æ—á–∏—Å—Ç–∏—Ç—å —Å—É—Ç–æ—á–Ω—ã–π –ø–ª–∞–Ω Live –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∂–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (nudge –∏ silence) –∏,
    –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ Live ‚Äî —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π –¥–Ω–µ–≤–Ω–æ–π –ø–ª–∞–Ω.
    """
    if not _scheduler:
        return

    # —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∂–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        for j in list(_scheduler.get_jobs()):  # type: ignore
            if not j.id:
                continue
            if j.id.startswith(f"nudge:{user_id}:") or j.id.startswith(
                f"silence:{user_id}:"
            ):
                try:
                    _scheduler.remove_job(j.id)
                except Exception:
                    pass
    except Exception:
        pass
    _user_jobs.pop(user_id, None)

    # –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ Live –≤–∫–ª—é—á—ë–Ω
    u = storage.get_user(user_id) or {}
    if int(u.get("proactive_enabled") or 0) == 1:
        _plan_daily(user_id)


# ---------------- Internal helpers/jobs ----------------

def _add_job(job_id: str, trigger: str, **kw) -> None:
    if not _scheduler:
        return
    try:
        _scheduler.add_job(id=job_id, trigger=trigger, replace_existing=False, **kw)  # type: ignore
    except Exception:
        # –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
        pass


async def _daily_bonus() -> None:
    uids = storage.daily_bonus_free_users()
    if not _bot or not uids:
        return
    amount = int(settings.subs.nightly_toki_bonus.get("free", 0))
    for uid in uids:
        try:
            await _bot.send_message(uid, f"üí∞ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: +{amount} —Ç–æ–∫–æ–≤")
        except Exception:
            pass


async def _subs_expire() -> None:
    uids = storage.expire_subscriptions()
    if not _bot or not uids:
        return
    for uid in uids:
        try:
            await _bot.send_message(uid, "‚ùóÔ∏è –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç—ë–∫")
        except Exception:
            pass


def _parse_hhmm(s: str) -> tuple[int, int]:
    return int(s[:2]), int(s[3:5])


def _today_utc(h: int, m: int, *, day_shift: int = 0) -> dt.datetime:
    now = dt.datetime.now(dt.timezone.utc)
    return now.replace(hour=h, minute=m, second=0, microsecond=0) + dt.timedelta(days=day_shift)


def schedule_window_jobs_for_user(user_id: int) -> None:
    if not _scheduler:
        return
    u = storage.get_user(user_id) or {}
    if int(u.get("proactive_enabled") or 0) != 1:
        return
    win = str(u.get("pro_window_utc") or "06:00-18:00")
    s, e = win.split("-")
    sh, sm = _parse_hhmm(s)
    eh, em = _parse_hhmm(e)
    for shift in (0, 1):
        start_dt = _today_utc(sh, sm, day_shift=shift)
        end_dt = _today_utc(eh, em, day_shift=shift)
        try:
            _scheduler.add_job(
                _on_window_start,
                trigger="date",
                run_date=start_dt,
                id=f"winstart:{user_id}:{shift}",
                args=(user_id,),
                replace_existing=True,
            )
            _scheduler.add_job(
                _on_window_end,
                trigger="date",
                run_date=end_dt,
                id=f"winend:{user_id}:{shift}",
                args=(user_id,),
                replace_existing=True,
            )
        except Exception:
            continue


def rebuild_all_window_jobs() -> None:
    if not _scheduler:
        return
    for uid in storage.select_proactive_candidates():
        schedule_window_jobs_for_user(uid)


def _on_window_start(user_id: int) -> None:
    _plan_daily(user_id)
    schedule_window_jobs_for_user(user_id)


def _on_window_end(user_id: int) -> None:
    if not _scheduler:
        return
    for j in list(_scheduler.get_jobs()):  # type: ignore
        if j.id and (j.id.startswith(f"nudge:{user_id}:") or j.id.startswith(f"silence:{user_id}:")):
            try:
                _scheduler.remove_job(j.id)
            except Exception:
                continue
    schedule_window_jobs_for_user(user_id)


def _now_ts() -> int:
    return int(dt.datetime.utcnow().timestamp())


def _get_user_settings(user_id: int) -> tuple[int, int, int]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (min_delay_sec, max_delay_sec, min_gap_sec).
    """
    u = storage.get_user(user_id) or {}
    min_delay_sec = int(u.get("pro_min_delay_min") or 60) * 60  # –¥–µ—Ñ–æ–ª—Ç 60 –º–∏–Ω
    max_delay_sec = int(u.get("pro_max_delay_min") or 720) * 60  # –¥–µ—Ñ–æ–ª—Ç 720 –º–∏–Ω
    min_gap_sec = int(u.get("pro_min_gap_min") or 10) * 60  # –¥–µ—Ñ–æ–ª—Ç 10 –º–∏–Ω
    return min_delay_sec, max_delay_sec, min_gap_sec


def _get_last_chat_id(user_id: int) -> Optional[int]:
    last = storage.get_last_chat(user_id)
    try:
        return int(last["id"]) if last else None
    except Exception:
        return None


def _last_message_recent(chat_id: int, secs: int) -> bool:
    """
    –ï—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ—Ç –∫–æ–≥–æ —É–≥–æ–¥–Ω–æ) –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ `secs` —Å–µ–∫—É–Ω–¥.
    """
    ts = storage.last_message_ts(chat_id)
    if not ts:
        return False
    return (dt.datetime.now(dt.timezone.utc) - ts).total_seconds() < secs


def _last_proactive_ts(user_id: int) -> Optional[int]:
    try:
        rows = storage.query(
            "SELECT strftime('%s', COALESCE(last_proactive_at, 0)) AS ts FROM users WHERE tg_id=?",
            (user_id,),
        )
        r = rows[0] if rows else None
        return int(r["ts"]) if r and r["ts"] else None
    except Exception:
        return None


def _rand_between(start_ts: int, end_ts: int) -> int:
    return random.randint(start_ts, end_ts)



def _get_delay_range_sec(user_id: int) -> tuple[int, int]:
    """–ü–∞—Ä–∞ (min,max) –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return storage.get_delay_range(user_id)


def _schedule_next(user_id: int, delay_sec: Optional[int] = None) -> None:
    """–ü–æ—Å—Ç–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –Ω—É–¥–∂ —á–µ—Ä–µ–∑ —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–ª–∞–Ω."""
    if not _scheduler:
        return
    u = storage.get_user(user_id) or {}
    if int(u.get("proactive_enabled") or 0) != 1:
        return
    last_chat = _get_last_chat_id(user_id)
    if not last_chat:
        return
    if delay_sec is None:
        mn, mx = _get_delay_range_sec(user_id)
        delay_sec = _rand_between(int(mn), int(mx))
    when_ts = _now_ts() + int(delay_sec)
    jid = f"nudge:{user_id}:{when_ts}"
    _add_job(jid, "date", run_date=dt.datetime.utcfromtimestamp(when_ts), func=_on_nudge_due, args=(user_id,))
    _user_jobs[user_id] = [jid]
    try:
        storage.delete_future_plan(user_id)
        storage.insert_plan(user_id, last_chat, when_ts)
    except Exception:
        pass



async def _tick_fill_plans():
    """
    –†–∞–∑ –≤ –º–∏–Ω—É—Ç—É: –µ—Å–ª–∏ —É —é–∑–µ—Ä–∞ Live –≤–∫–ª—é—á—ë–Ω –∏ –±—É–¥—É—â–∏—Ö –¥–∂–æ–± –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–π —Ç–∞–π–º–∏–Ω–≥.
    (–ú—è–≥–∫–∏–π –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫, —á—Ç–æ–±—ã –ø–ª–∞–Ω –Ω–µ ¬´–∑–∞–±—ã–≤–∞–ª—Å—è¬ª.)
    """
    if not _scheduler:
        return
    now = _now_ts()
    for uid in storage.select_proactive_candidates():
        # –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –Ω–∞—à–∞ –¥–∂–æ–±–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±—É–¥—É—â–µ–º?
        has_future = False
        for j in _scheduler.get_jobs():  # type: ignore
            if j.id and (j.id.startswith(f"nudge:{uid}:") or j.id.startswith(f"silence:{uid}:")):
                try:
                    if j.next_run_time and int(j.next_run_time.timestamp()) > now:
                        has_future = True
                        break
                except Exception:
                    continue

        if not has_future:
            _schedule_next(uid)



async def _on_silence(user_id: int, chat_id: int):
    """
    –ß–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –ò–ò:
    ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç–∏—à–∏–Ω—É (–ø–æ—Å–ª–µ–¥–Ω–∏–µ ~9 –º–∏–Ω—É—Ç),
    ‚Äî –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∏–∑ –±—É–¥—É—â–∏—Ö –Ω—É–¥–∂‚Äë–¥–∂–æ–± ‚Äî —Å—Ç–∞–≤–∏–º –Ω–æ–≤—ã–π –¥–Ω–µ–≤–Ω–æ–π –ø–ª–∞–Ω.
    """
    if not _scheduler:
        return
    # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–∏—à–∏–Ω—ã
    if _last_message_recent(chat_id, 9 * 60):
        return

    # –£–∂–µ –µ—Å—Ç—å –±—É–¥—É—â–µ–µ?
    now = _now_ts()
    for j in _scheduler.get_jobs():  # type: ignore
        if j.id and j.id.startswith(f"nudge:{user_id}:"):
            try:
                if j.next_run_time and int(j.next_run_time.timestamp()) > now:
                    return  # –ø–ª–∞–Ω —É–∂–µ –µ—Å—Ç—å
            except Exception:
                continue

    # —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Ç–∞–π–º–∏–Ω–≥
    _schedule_next(user_id)


async def _on_nudge_due(user_id: int):
    """
    –°—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∞–π–º–∏–Ω–≥–∞: ¬´–ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å¬ª.
    –í—Å–µ–≥–¥–∞ —à–ª—ë–º –≤ –ê–ö–¢–£–ê–õ–¨–ù–´–ô last_chat –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ü—Ä–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ ‚Äî –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –≤ (now..+24h).
    """
    last_chat = _get_last_chat_id(user_id)
    if not last_chat:
        # –Ω–µ—Ç —á–∞—Ç–æ–≤ ‚Äî –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏
        _schedule_next(user_id)
        return

    now = _now_ts()
    # –µ—Å–ª–∏ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å <5 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥ ‚Äî –ø–µ—Ä–µ–Ω–æ—Å
    if _last_message_recent(last_chat, 5 * 60):
        _schedule_next(user_id)
        return


    # min_gap
    _, _, min_gap = _get_user_settings(user_id)
    last_sent = _last_proactive_ts(user_id)
    if last_sent and (now - last_sent) < min_gap:
        wait = last_sent + min_gap + _rand_between(30, 300) - now
        _schedule_next(user_id, delay_sec=wait)
        return

    # –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ (—á–µ—Ä–µ–∑ –¥–æ–º–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é)
    ok = await _try_send_nudge(user_id, last_chat)
    # –Ω–∞–∑–Ω–∞—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ç–∞–π–º–∏–Ω–≥ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    _schedule_next(user_id)
    if ok:
        return



async def _try_send_nudge(user_id: int, chat_id: int) -> bool:
    """
    –í—ã–∑–æ–≤ –¥–æ–º–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–∞–∫—Ç–∏–≤–∞. –ü—É—Ç—å –ø–æ–¥–±–∏—Ä–∞–µ–º –≥–∏–±–∫–æ:
    1) app.domain.proactive.proactive_nudge
    2) app.proactive.proactive_nudge
    """
    fn = None
    try:
        from app.domain.proactive import proactive_nudge as fn  # type: ignore
    except Exception:
        try:
            from app.proactive import proactive_nudge as fn  # type: ignore
        except Exception:
            fn = None

    if not fn or not _bot:
        return False

    try:
        text = await fn(bot=_bot, user_id=user_id, chat_id=chat_id)
        return bool(text)
    except Exception:
        return False
