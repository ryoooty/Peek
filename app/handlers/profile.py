# app/profile.py
from __future__ import annotations


from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app import storage
from app.config import settings
from app.scheduler import rebuild_user_jobs



router = Router(name="profile")


def _profile_text(u: dict) -> str:
    totals = storage.user_totals(u["tg_id"])
    top_line = "‚Äî"
    if totals["top_character"]:
        top_line = f"{totals['top_character']} ({totals['top_count']} —Å–æ–æ–±.)"
    sub = (u.get("subscription") or "free").lower()
    chats_total = len(storage.list_user_chats(u["tg_id"], page=1, page_size=9999))
    model = (u.get("default_model") or settings.default_model)
    live_on = bool(u.get("proactive_enabled") or 0)
    per_day = int(u.get("pro_per_day") or 2)
    gap_min = int(u.get("pro_min_gap_min") or 10)
    max_delay = int(u.get("pro_max_delay_min") or 720)
    return (
        "<b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n"
        f"–ü–æ–¥–ø–∏—Å–∫–∞: <b>{sub}</b>\n"
        f"–ú–æ–¥–µ–ª—å: <b>{model}</b>\n"
        f"–†–µ–∂–∏–º Live: {'üü¢ –í–∫–ª' if live_on else '‚ö™ –í—ã–∫–ª'}\n"
        f"–ù—É–¥–∂–µ–π –≤ —Å—É—Ç–∫–∏: <b>{per_day}</b>\n"
        f"–ú–∏–Ω. –∏–Ω—Ç–µ—Ä–≤–∞–ª: <b>{gap_min} –º–∏–Ω</b>\n"
        f"–ú–∞–∫—Å. –∏–Ω—Ç–µ—Ä–≤–∞–ª: <b>{max_delay} –º–∏–Ω</b>\n\n"
        f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: <b>{totals['user_msgs'] + totals['ai_msgs']}</b>\n"
        f"–í—Å–µ–≥–æ —á–∞—Ç–æ–≤: <b>{chats_total}</b>\n"
        f"–¢–æ–ø –ø–µ—Ä—Å–æ–Ω–∞–∂: <b>{top_line}</b>\n"
    )


def _profile_kb(u: dict):
    kb = InlineKeyboardBuilder()
    # 1 ‚Äî –º–æ–¥–µ–ª—å
    kb.button(text=f"ü§ñ –ú–æ–¥–µ–ª—å: {u.get('default_model') or settings.default_model}", callback_data="prof:model")
    # 2 ‚Äî –±–∞–ª–∞–Ω—Å/–ø–æ–¥–ø–∏—Å–∫–∞
    kb.button(text="üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="prof:balance")
    kb.button(text="üé´ –ü–æ–¥–ø–∏—Å–∫–∞", callback_data="prof:sub")
    # 3 ‚Äî —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è
    kb.button(text=f"üí¨ –†–µ–∂–∏–º: {u.get('default_chat_mode') or 'rp'}", callback_data="prof:mode")
    # 4 ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∏/–∏–Ω—Ñ–æ
    kb.button(text="‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="prof:settings")
    kb.button(text="‚Ñπ –ò–Ω—Ñ–æ", callback_data="prof:info")
    kb.adjust(1, 2, 1, 2)
    return kb.as_markup()


@router.message(Command("profile"))
async def show_profile(msg: Message):
    storage.ensure_user(msg.from_user.id, msg.from_user.username or None)
    u = storage.get_user(msg.from_user.id) or {}
    await msg.answer(_profile_text(u), reply_markup=_profile_kb(u))


@router.callback_query(F.data == "prof:model")
async def cb_model(call: CallbackQuery):
    u = storage.get_user(call.from_user.id) or {}
    models = list(settings.model_tariffs.keys())
    cur = (u.get("default_model") or settings.default_model)
    nxt = models[(models.index(cur) + 1) % len(models)] if models else cur
    storage.set_user_field(call.from_user.id, "default_model", nxt)
    u = storage.get_user(call.from_user.id) or {}
    await call.message.edit_text(_profile_text(u), reply_markup=_profile_kb(u))
    await call.answer("–ú–æ–¥–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞")


@router.callback_query(F.data == "prof:balance")
async def cb_balance(call: CallbackQuery):
    kb = InlineKeyboardBuilder()
    kb.button(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="prof:back")
    kb.adjust(1)
    await call.message.edit_text(_balance_text(call.from_user.id), reply_markup=kb.as_markup())
    await call.answer()



@router.callback_query(F.data == "prof:sub")
async def cb_sub(call: CallbackQuery):
    u = storage.get_user(call.from_user.id) or {}
    text = (
        "–ü–æ–¥–ø–∏—Å–∫–∞ —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é. –í –ø–ª–∞–Ω–∞—Ö ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è.\n"
        "–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: <b>{}</b>".format((u.get("subscription") or "free").lower())
    )
    kb = InlineKeyboardBuilder()
    kb.button(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="prof:back")
    kb.adjust(1)
    await call.message.edit_text(text, reply_markup=kb.as_markup())
    await call.answer()


@router.callback_query(F.data == "prof:mode")
async def cb_mode(call: CallbackQuery):
    u = storage.get_user(call.from_user.id) or {}
    new_mode = "live" if (u.get("default_chat_mode") or "rp") == "rp" else "rp"
    storage.set_user_field(call.from_user.id, "default_chat_mode", new_mode)
    u = storage.get_user(call.from_user.id) or {}
    await call.message.edit_text(_profile_text(u), reply_markup=_profile_kb(u))
    await call.answer("–†–µ–∂–∏–º –æ–±–Ω–æ–≤–ª—ë–Ω")


@router.callback_query(F.data == "prof:settings")
async def cb_settings(call: CallbackQuery):
    u = storage.get_user(call.from_user.id) or {}
    kb = InlineKeyboardBuilder()
    # –£–±—Ä–∞–ª–∏ ¬´üìè –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–æ–≤¬ª (–≤–µ–∑–¥–µ –ê–≤—Ç–æ). –û—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî –∫–∞–∫ –±—ã–ª–æ.
    kb.button(text=f"üß© –í–∏–¥ –ø—Ä–æ–º—Ç–æ–≤ ({u.get('default_resp_size') or 'auto'})", callback_data="set:prompts")
    kb.button(text="üóú –ê–≤—Ç–æ—Å–∂–∞—Ç–∏–µ: {}".format('–≤–∫–ª' if settings.limits.auto_compress_default else '–≤—ã–∫–ª'), callback_data="set:compress")
    kb.button(text="‚ö° –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Live", callback_data="set:live")
    kb.button(text="üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å", callback_data="set:tz")
    kb.button(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="prof:back")
    kb.adjust(1)
    await call.message.edit_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=kb.as_markup())
    await call.answer()


@router.callback_query(F.data == "prof:info")
async def cb_info(call: CallbackQuery):
    await call.answer("–ë–æ—Ç Peek. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. /reload –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥.")


@router.callback_query(F.data == "prof:back")
async def cb_back(call: CallbackQuery):
    u = storage.get_user(call.from_user.id) or {}
    await call.message.edit_text(_profile_text(u), reply_markup=_profile_kb(u))
    await call.answer()


# ---- Live Settings (–∫–∞–∫ –±—ã–ª–æ, –±–µ–∑ ¬´–¥–ª–∏–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤¬ª) ----

@router.callback_query(F.data == "set:live")
async def cb_set_live(call: CallbackQuery):
    u = storage.get_user(call.from_user.id) or {}
    live_on = bool(u.get("proactive_enabled") or 0)
    kb = InlineKeyboardBuilder()
    kb.button(text=("üü¢ –í—ã–∫–ª—é—á–∏—Ç—å Live" if live_on else "üü¢ –í–∫–ª—é—á–∏—Ç—å Live"), callback_data="set:live:toggle")
    kb.button(text=f"–í –¥–µ–Ω—å: {int(u.get('pro_per_day') or 2)}", callback_data="set:live:per")
    kb.button(text=f"–û–∫–Ω–æ: {u.get('pro_window_local') or '09:00-21:00'}", callback_data="set:live:win")
    kb.button(text=f"–ü–∞—É–∑–∞: {int(u.get('pro_min_gap_min') or 10)} –º–∏–Ω", callback_data="set:live:gap")
    kb.button(text=f"–ú–∞–∫—Å: {int(u.get('pro_max_delay_min') or 720)} –º–∏–Ω", callback_data="set:live:max")
    kb.button(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="prof:settings")
    kb.adjust(1)
    await call.message.edit_text(
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Live:\n‚Äî –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Å–ª—É—á–∞–π–Ω—ã–º —Ç–∞–π–º–∏–Ω–≥–∞–º –≤ —Ç–µ—á–µ–Ω–∏–µ —Å—É—Ç–æ–∫.\n‚Äî –ú–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É.",
        reply_markup=kb.as_markup()
    )
    await call.answer()


@router.callback_query(F.data == "set:live:toggle")
async def cb_set_live_toggle(call: CallbackQuery):
    u = storage.get_user(call.from_user.id) or {}
    live_on = 0 if (u.get("proactive_enabled") or 0) else 1
    storage.set_user_field(call.from_user.id, "proactive_enabled", live_on)
    rebuild_user_jobs(call.from_user.id)
    # –°–µ–π—á–∞—Å –æ–∫–Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º, –Ω–æ –æ—Å—Ç–∞–≤–∏–º UI ‚Äî —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å.
    await cb_set_live(call)


@router.callback_query(F.data == "set:live:per")
async def cb_set_live_per(call: CallbackQuery):
    u = storage.get_user(call.from_user.id) or {}
    # –¶–∏–∫–ª –∑–Ω–∞—á–µ–Ω–∏–π: 2‚Üí3‚Üí5‚Üí1‚Üí2
    val = int(u.get("pro_per_day") or 2)
    cycle = [2, 3, 5, 1]
    try:
        nxt = cycle[(cycle.index(val) + 1) % len(cycle)]
    except ValueError:
        nxt = 2
    storage.set_user_field(call.from_user.id, "pro_per_day", nxt)
    rebuild_user_jobs(call.from_user.id)
    await cb_set_live(call)


@router.callback_query(F.data == "set:live:win")
async def cb_set_live_win(call: CallbackQuery):
    # UI —Å–æ—Ö—Ä–∞–Ω–∏–º, –Ω–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ–∫–Ω–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç.
    u = storage.get_user(call.from_user.id) or {}
    win = (u.get("pro_window_local") or "09:00-21:00")
    presets = ["09:00-21:00", "10:00-22:00", "12:00-20:00", "08:00-18:00"]
    nxt = presets[(presets.index(win) + 1) % len(presets)]
    storage.set_user_field(call.from_user.id, "pro_window_local", nxt)
    # –ø—Ä–æ—Å—Ç–∞–≤–∏–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–µ UTC‚Äë–ø–æ–ª–µ, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≥–¥–µ‚Äë—Ç–æ –µ—â—ë
    tz = int((u.get("tz_offset_min") or 180))
    def _to_utc(w: str) -> str:
        a, b = w.split("-")
        parse = lambda s: int(s[:2]) * 60 + int(s[3:5])
        fmt = lambda m: f"{(m // 60) % 24:02d}:{m % 60:02d}"
        da, db = parse(a) - tz, parse(b) - tz
        return f"{fmt(da)}-{fmt(db)}"
    storage.set_user_field(call.from_user.id, "pro_window_utc", _to_utc(nxt))
    rebuild_user_jobs(call.from_user.id)
    await cb_set_live(call)


@router.callback_query(F.data == "set:live:gap")
async def cb_set_live_gap(call: CallbackQuery):
    u = storage.get_user(call.from_user.id) or {}
    val = int(u.get("pro_min_gap_min") or 10)
    cycle = [5, 10, 15, 30, 60, 120]

    
    try:
        nxt = cycle[(cycle.index(val) + 1) % len(cycle)]
    except ValueError:
        nxt = 10
    storage.set_user_field(call.from_user.id, "pro_min_gap_min", nxt)
    rebuild_user_jobs(call.from_user.id)
    await cb_set_live(call)

    


# ---- –î—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–æ—Å—Ç–∞–≤–ª–µ–Ω—ã) ----

@router.callback_query(F.data == "set:prompts")
async def cb_set_prompts(call: CallbackQuery):
    u = storage.get_user(call.from_user.id) or {}
    size = (u.get("default_resp_size") or "auto")
    order = ["small", "medium", "large", "auto"]  # –≤ UI –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ¬´–¥–ª–∏–Ω—É¬ª, –Ω–æ –≤–∏–¥ –ø—Ä–æ–º—Ç–æ–≤ –æ—Å—Ç–∞–≤–ª–µ–Ω
    nxt = order[(order.index(size) + 1) % len(order)]
    storage.set_user_field(call.from_user.id, "default_resp_size", nxt)
    await cb_settings(call)


@router.callback_query(F.data == "set:compress")
async def cb_set_compress(call: CallbackQuery):
    settings.limits.auto_compress_default = not settings.limits.auto_compress_default
    await cb_settings(call)


@router.callback_query(F.data == "set:tz")
async def cb_set_tz(call: CallbackQuery):
    await call.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:", reply_markup=tz_keyboard("tzprof")
    )
    await call.answer()


@router.callback_query(F.data.startswith("tzprof:"))
async def cb_tz_prof(call: CallbackQuery):
    try:
        offset = int(call.data.split(":", 1)[1])
    except Exception:
        await call.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", show_alert=True)
        return
    storage.set_user_field(call.from_user.id, "tz_offset_min", offset)
    u = storage.get_user(call.from_user.id) or {}
    await call.message.edit_text(_profile_text(u), reply_markup=_profile_kb(u))
    await call.answer("–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –æ–±–Ω–æ–≤–ª—ë–Ω")


@router.message(Command("tz"))
async def cmd_tz(msg: Message):
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:", reply_markup=tz_keyboard("tzprof"))
