# app/handlers/admin.py
from __future__ import annotations

import time
import traceback
from pathlib import Path
from typing import Optional

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest

from app import storage
from app.config import settings, reload_settings, BASE_DIR

router = Router(name="admin")

# --------- Constants / Paths ---------
MEDIA_DIR = Path(BASE_DIR) / "media" / "characters"
MEDIA_DIR.mkdir(parents=True, exist_ok=True)


# --------- Helpers ---------
def _is_admin(uid: int) -> bool:
    try:
        return int(uid) in {int(x) for x in (settings.admin_ids or [])}
    except Exception:
        return False


async def _require_admin(msg_or_call) -> bool:
    uid = msg_or_call.from_user.id
    if not _is_admin(uid):
        # –ú–æ–ª—á–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –Ω–µ –ø–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
        return False
    return True


def _admin_kb() -> InlineKeyboardBuilder:
    kb = InlineKeyboardBuilder()
    kb.button(text="üõ† –¢–µ—Ö—Ä–∞–±–æ—Ç—ã on/off", callback_data="admin:maintenance")
    kb.button(text="üîÑ Reload config", callback_data="admin:reload")
    kb.button(text="üì® Nudge now (self)", callback_data="admin:nudge")
    kb.button(text="üìä –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", callback_data="admin:diag")
    kb.button(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin:stats")
    kb.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", callback_data="admin:char_add_help")
    kb.button(text="üñº –§–æ—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", callback_data="admin:char_photo_help")
    kb.adjust(2, 2, 2, 2)
    return kb


def _fmt_diag() -> str:
    try:
        u_cnt = storage._q("SELECT COUNT(*) c FROM users").fetchone()["c"]
        c_cnt = storage._q("SELECT COUNT(*) c FROM chats").fetchone()["c"]
        m_cnt = storage._q("SELECT COUNT(*) c FROM messages").fetchone()["c"]
        p_cnt = storage._q("SELECT COUNT(*) c FROM proactive_log").fetchone()["c"]
    except Exception:
        u_cnt = c_cnt = m_cnt = p_cnt = "?"
    mode = "ON" if settings.maintenance_mode else "OFF"
    model = settings.default_model
    return (
        "<b>–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞</b>\n"
        f"‚Ä¢ Users: <b>{u_cnt}</b>\n"
        f"‚Ä¢ Chats: <b>{c_cnt}</b>\n"
        f"‚Ä¢ Messages: <b>{m_cnt}</b>\n"
        f"‚Ä¢ Proactive log: <b>{p_cnt}</b>\n"
        f"‚Ä¢ Maintenance: <b>{mode}</b>\n"
        f"‚Ä¢ Default model: <code>{model}</code>\n"
    )


async def _nudge_self(uid: int) -> str:
    """
    –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å Live-–Ω—É–¥–∂ —Å–∞–º–æ–º—É —Å–µ–±–µ –≤ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π last_chat.
    """
    last = storage.get_last_chat(uid)
    if not last:
        return "‚ùå –ù–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏."
    chat_id = int(last["id"])

    fn = None
    # –ø–æ–¥–¥–µ—Ä–∂–∏–º –æ–±–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –¥–æ–º–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    try:
        from app.domain.proactive import proactive_nudge as fn  # type: ignore
    except Exception:
        try:
            from app.proactive import proactive_nudge as fn  # type: ignore
        except Exception:
            fn = None

    if not fn:
        return "‚ùå –ù–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ proactive_nudge (app.domain.proactive –∏–ª–∏ app.proactive)."

    try:
        # –ø—Ä–æ–±—É–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É –±–µ–∑ bot
        txt = await fn(user_id=uid, chat_id=chat_id)  # type: ignore[misc]
        return "‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ." if txt else "‚ö† –ù–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç)."
    except TypeError:
        # –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è bot ‚Äî —Å–æ–æ–±—â–∏–º —è–≤–Ω–æ
        return "‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–∑–≤–∞—Ç—å proactive_nudge: –æ–∂–∏–¥–∞–µ—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä bot."
    except Exception:
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:\n<pre>{}</pre>".format(
            (traceback.format_exc()[:1500]).replace("<", "&lt;")
        )


def _escape(s: str) -> str:
    return s.replace("<", "&lt;").replace(">", "&gt;")


# --------- /admin: –ø–∞–Ω–µ–ª—å ---------
@router.message(Command("admin"))
async def cmd_admin(msg: Message):
    if not await _require_admin(msg):
        return
    text = (
        "<b>–ê–¥–º–∏–Ω‚Äë–ø–∞–Ω–µ–ª—å</b>\n"
        "–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∏–∂–µ. –ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /maintenance ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ—Ö—Ä–∞–±–æ—Ç—ã\n"
        "‚Ä¢ /reload ‚Äî –ø–µ—Ä–µ—á–∏—Ç–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥\n"
        "‚Ä¢ /nudge_now ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å Live —Å–µ–±–µ\n"
        "‚Ä¢ /diag ‚Äî –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞\n"
        "‚Ä¢ /stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "‚Ä¢ /char_add, /char_photo ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏"
    )
    await msg.answer(text, reply_markup=_admin_kb().as_markup())


@router.callback_query(F.data.startswith("admin:"))
async def cb_admin(call: CallbackQuery):
    if not await _require_admin(call):
        return
    action = call.data.split(":", 1)[1]
    if action == "maintenance":
        settings.maintenance_mode = not settings.maintenance_mode
        await call.answer(f"Maintenance: {'ON' if settings.maintenance_mode else 'OFF'}", show_alert=True)
        await call.message.edit_text(_fmt_diag(), reply_markup=_admin_kb().as_markup())
        return
    if action == "reload":
        reload_settings()
        await call.answer("Reloaded ‚úÖ", show_alert=True)
        await call.message.edit_text(_fmt_diag(), reply_markup=_admin_kb().as_markup())
        return
    if action == "nudge":
        res = await _nudge_self(call.from_user.id)
        await call.answer(res, show_alert=True)
        return
    if action == "diag":
        await call.message.edit_text(_fmt_diag(), reply_markup=_admin_kb().as_markup())
        await call.answer()
        return
    if action == "stats":
        # —Å–µ–π—á–∞—Å stats ~= diag; –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å
        await call.message.edit_text(_fmt_diag(), reply_markup=_admin_kb().as_markup())
        await call.answer()
        return
    if action == "char_add_help":
        await call.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n/char_add –ò–º—è [—Ñ–∞–Ω–¥–æ–º] [–∫—Ä–∞—Ç–∫–∞—è_–∏–Ω—Ñ–∞]", show_alert=True)
        return
    if action == "char_photo_help":
        await call.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é:\n/char_photo <id>", show_alert=True)
        return


# --------- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã ---------
@router.message(Command("maintenance"))
async def cmd_maintenance(msg: Message):
    if not await _require_admin(msg):
        return
    settings.maintenance_mode = not settings.maintenance_mode
    await msg.answer(f"Maintenance: {'ON' if settings.maintenance_mode else 'OFF'}")


@router.message(Command("reload"))
async def cmd_reload(msg: Message):
    if not await _require_admin(msg):
        return
    reload_settings()
    await msg.answer("Config reloaded ‚úÖ")


@router.message(Command("nudge_now"))
async def cmd_nudge_now(msg: Message):
    if not await _require_admin(msg):
        return
    res = await _nudge_self(msg.from_user.id)
    await msg.answer(res)


@router.message(Command("diag"))
async def cmd_diag(msg: Message):
    if not await _require_admin(msg):
        return
    await msg.answer(_fmt_diag())


@router.message(Command("stats"))
async def cmd_stats(msg: Message):
    if not await _require_admin(msg):
        return
    await msg.answer(_fmt_diag())


# --------- –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ ---------
@router.message(Command("char_add"))
async def cmd_char_add(msg: Message):
    if not await _require_admin(msg):
        return
    # /char_add <name> [fandom] [info_short...]
    parts = (msg.text or "").split(maxsplit=2)
    if len(parts) < 2:
        return await msg.answer(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /char_add <–∏–º—è> [—Ñ–∞–Ω–¥–æ–º] [–∫—Ä–∞—Ç–∫–∞—è_–∏–Ω—Ñ–∞]\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/char_add Furina Genshin 'Hydro Archon'</code>"
        )
    name = parts[1]
    fandom = None
    info = None
    if len(parts) >= 3:
        tmp = parts[2].split(maxsplit=1)
        fandom = tmp[0]
        info = tmp[1] if len(tmp) > 1 else None
    cid = storage.ensure_character(name, fandom=fandom, info_short=info)
    await msg.answer(
        f"–ü–µ—Ä—Å–æ–Ω–∞–∂ ¬´{_escape(name)}¬ª —Å–æ–∑–¥–∞–Ω (id=<code>{cid}</code>).\n"
        "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é: <code>/char_photo &lt;id&gt;</code>"
    )


@router.message(Command("char_photo"))
async def cmd_char_photo(msg: Message):
    if not await _require_admin(msg):
        return
    # –†–∞–∑–±–∏—Ä–∞–µ–º char_id –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∏ (–Ω–∞ —Å–ª—É—á–∞–π —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é)
    char_id: Optional[int] = None
    for source in (msg.text or "", msg.caption or ""):
        if not source:
            continue
        ps = source.split()
        if len(ps) >= 2 and ps[0] == "/char_photo":
            try:
                char_id = int(ps[1])
                break
            except Exception:
                pass
    if not char_id:
        return await msg.answer(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é: <code>/char_photo &lt;id&gt;</code>"
        )

    # file_id –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∏–∑ reply
    file_id: Optional[str] = None
    if msg.photo:
        file_id = msg.photo[-1].file_id
    elif msg.reply_to_message and msg.reply_to_message.photo:
        file_id = msg.reply_to_message.photo[-1].file_id
    if not file_id:
        return await msg.answer(
            "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Ñ–æ—Ç–æ.\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/char_photo 123</code>"
        )

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –≤ media/characters/<id>_<ts>.<ext>
    try:
        fl = await msg.bot.get_file(file_id)
        ext = Path(fl.file_path or "photo.jpg").suffix or ".jpg"
        save_name = f"{char_id}_{int(time.time())}{ext}"
        save_path = MEDIA_DIR / save_name
        await msg.bot.download(file=fl.file_id, destination=save_path)
    except TelegramBadRequest:
        # fallback: –¥—Ä—É–≥–∏–µ –≤–µ—Ä—Å–∏–∏ aiogram –º–æ–≥—É—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç get_file(...) –≤ download
        try:
            fl = await msg.bot.get_file(file_id)
            ext = Path(fl.file_path or "photo.jpg").suffix or ".jpg"
            save_name = f"{char_id}_{int(time.time())}{ext}"
            save_path = MEDIA_DIR / save_name
            await msg.bot.download(file=fl, destination=save_path)
        except Exception as e:
            return await msg.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ: <code>{_escape(str(e))}</code>")
    except Exception as e:
        return await msg.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ: <code>{_escape(str(e))}</code>")

    # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—É—Ç—å; –µ—Å–ª–∏ –Ω–µ—Ç —Ç–∞–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏–º file_id
    try:
        storage.set_character_photo_path(char_id, str(save_path.as_posix()))  # type: ignore[attr-defined]
    except Exception:
        # —Å—Ç–∞—Ä—ã–π —Ñ–æ–ª–±—ç–∫
        storage.set_character_photo(char_id, file_id)

    await msg.answer("–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úÖ\n–ü—É—Ç—å: <code>{_}</code>".format(_=save_path.as_posix()))
