from __future__ import annotations

import asyncio
import re

from aiogram import Router, F
from aiogram.enums import ChatAction
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app import storage
from app.config import settings
from app.domain.chats import chat_turn, live_stream, summarize_chat
from app.scheduler import schedule_silence_check

router = Router(name="chats")


class ChatSG(StatesGroup):
    chatting = State()
    importing = State()


_SENT_SPLIT_RE = re.compile(r"(?<=[\.\!\?‚Ä¶])\s+")


def _limits_for(user_id: int):
    u = storage.get_user(user_id) or {}
    sub = (u.get("subscription") or "free").lower()
    limits = getattr(settings.subs, sub, settings.subs.free)
    return limits


def chats_page_kb(user_id: int, page: int):
    lim = _limits_for(user_id)
    rows = storage.list_user_chats(user_id, page=page, page_size=lim.chats_page_size)
    kb = InlineKeyboardBuilder()
    for r in rows:
        label = f"{r['seq_no']} ‚Äî {r['char_name']}"
        kb.button(text=label, callback_data=f"chat:open:{r['id']}")
    # –ø–∞–≥–∏–Ω–∞—Ü–∏—è (–º–∞–∫—Å pages_max)
    nav = InlineKeyboardBuilder()
    if page > 1:
        nav.button(text="‚Üê", callback_data=f"chats:page:{page-1}")
    nav.button(text=f"{page}/{lim.chats_pages_max}", callback_data="chats:noop")
    if page < lim.chats_pages_max:
        nav.button(text="‚Üí", callback_data=f"chats:page:{page+1}")
    kb.row(*nav.buttons)
    kb.adjust(1)
    return kb


async def list_chats(msg_or_call: Message | CallbackQuery, page: int = 1):
    user_id = msg_or_call.from_user.id if isinstance(msg_or_call, CallbackQuery) else msg_or_call.from_user.id
    kb = chats_page_kb(user_id, page)
    text = "–í–∞—à–∏ —á–∞—Ç—ã:"
    if isinstance(msg_or_call, CallbackQuery):
        await msg_or_call.message.edit_text(text, reply_markup=kb.as_markup())
        await msg_or_call.answer()
    else:
        await msg_or_call.answer(text, reply_markup=kb.as_markup())


@router.message(Command("chats"))
async def cmd_chats(msg: Message):
    await list_chats(msg, page=1)


@router.callback_query(F.data.startswith("chats:page:"))
async def cb_chats_page(call: CallbackQuery):
    page = int(call.data.split(":")[2])
    await list_chats(call, page=page)


def chat_inline_kb(chat_id: int, user_id: int):
    ch = storage.get_chat(chat_id) or {}
    # 1: –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –ß—Ç–æ —Ç—É—Ç –±—ã–ª–æ
    kb = InlineKeyboardBuilder()
    kb.button(text="‚ñ∂ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data=f"chat:cont:{chat_id}")
    kb.button(text="üß† –ß—Ç–æ —Ç—É—Ç –±—ã–ª–æ", callback_data=f"chat:what:{chat_id}")
    # 2: –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ/–ü–µ—Ä—Å–æ–Ω–∞–∂
    is_fav = int(ch.get("is_favorite") or 0) == 1
    kb.button(text=("‚òÖ –£–±—Ä–∞—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ" if is_fav else "‚òÜ –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"), callback_data=f"chat:fav:{chat_id}")
    kb.button(text=f"üé≠ –ü–µ—Ä—Å–æ–Ω–∞–∂", callback_data=f"char:open:{ch['char_id']}")
    # 3: –≠–∫—Å–ø–æ—Ä—Ç/–ò–º–ø–æ—Ä—Ç
    kb.button(text="‚¨á –≠–∫—Å–ø–æ—Ä—Ç", callback_data=f"chat:export:{chat_id}")
    kb.button(text="‚¨Ü –ò–º–ø–æ—Ä—Ç", callback_data=f"chat:import:{chat_id}")
    # 4: –ú–µ–Ω—é/–£–¥–∞–ª–∏—Ç—å
    kb.button(text="üìã –ú–µ–Ω—é", callback_data="chars:menu")
    kb.button(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"chat:del:{chat_id}")
    kb.adjust(2, 2, 2, 2)
    return kb


async def open_chat_inline(msg_or_call: Message | CallbackQuery, *, chat_id: int):
    ch = storage.get_chat(chat_id)
    if not ch:
        if isinstance(msg_or_call, CallbackQuery):
            return await msg_or_call.answer("–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return await msg_or_call.answer("–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    text = f"–ß–∞—Ç #{ch['seq_no']} ‚Äî {ch['char_name']}\n–†–µ–∂–∏–º: {ch['mode']}"
    kb = chat_inline_kb(chat_id, ch["user_id"])
    if isinstance(msg_or_call, CallbackQuery):
        await msg_or_call.message.edit_text(text, reply_markup=kb.as_markup())
        await msg_or_call.answer()
    else:
        await msg_or_call.answer(text, reply_markup=kb.as_markup())


# ---- Inline actions ----
@router.callback_query(F.data.startswith("chat:open:"))
async def cb_open_chat(call: CallbackQuery):
    chat_id = int(call.data.split(":")[2])
    await open_chat_inline(call, chat_id=chat_id)


@router.callback_query(F.data.startswith("chat:cont:"))
async def cb_continue_chat(call: CallbackQuery):
    await call.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ‚Ä¶")


@router.callback_query(F.data.startswith("chat:what:"))
async def cb_what(call: CallbackQuery):
    chat_id = int(call.data.split(":")[2])
    try:
        await call.answer("–î—É–º–∞—é‚Ä¶")
        await call.message.bot.send_chat_action(call.message.chat.id, ChatAction.TYPING)
        u = storage.get_user(call.from_user.id) or {}
        model = (u.get("default_model") or settings.default_model)
        s = await summarize_chat(chat_id, model=model)
        await call.message.edit_text(f"–ö—Ä–∞—Ç–∫–æ –æ —á–∞—Ç–µ:\n\n{s}", reply_markup=chat_inline_kb(chat_id, call.from_user.id).as_markup())
    except Exception:
        await call.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ", show_alert=True)


@router.callback_query(F.data.startswith("chat:fav:"))
async def cb_fav(call: CallbackQuery):
    chat_id = int(call.data.split(":")[2])
    lim = _limits_for(call.from_user.id)
    ok = storage.toggle_fav_chat(call.from_user.id, chat_id, allow_max=lim.fav_chats_max)
    if not ok:
        await call.answer("–õ–∏–º–∏—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω", show_alert=True)
    await open_chat_inline(call, chat_id=chat_id)


@router.callback_query(F.data.startswith("chat:export:"))
async def cb_export(call: CallbackQuery):
    chat_id = int(call.data.split(":")[2])
    txt = storage.export_chat_txt(chat_id)
    await call.message.edit_text("–≠–∫—Å–ø–æ—Ä—Ç —á–∞—Ç–∞ (txt): –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª–æ–º‚Ä¶", reply_markup=chat_inline_kb(chat_id, call.from_user.id).as_markup())
    try:
        from io import BytesIO
        bio = BytesIO(txt.encode("utf-8"))
        bio.name = f"chat_{chat_id}.txt"
        await call.message.answer_document(bio)
    except Exception:
        pass


@router.callback_query(F.data.startswith("chat:import:"))
async def cb_import(call: CallbackQuery, state: FSMContext):
    chat_id = int(call.data.split(":")[2])
    await state.set_state(ChatSG.importing)
    await state.update_data(chat_id=chat_id)
    await call.message.edit_text("–ü—Ä–∏—à–ª–∏—Ç–µ –æ–¥–∏–Ω —Ñ–∞–π–ª TXT/DOCX/PDF (–¥–æ 5 –ú–ë) –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.", reply_markup=chat_inline_kb(chat_id, call.from_user.id).as_markup())
    await call.answer()


@router.message(ChatSG.importing, F.document)
async def import_doc(msg: Message, state: FSMContext):
    data = await state.get_data()
    chat_id = int(data.get("chat_id") or 0)
    doc = msg.document
    if not doc or int(doc.file_size or 0) > 5_000_000:
        await msg.answer("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ TXT/DOCX/PDF –¥–æ 5 –ú–ë.")
        return
    ext = (doc.file_name or "").lower()
    try:
        file = await msg.bot.get_file(doc.file_id)
        from io import BytesIO
        buf = BytesIO()
        await msg.bot.download_file(file.file_path, buf)
        buf.seek(0)
        text = ""
        if ext.endswith(".txt"):
            text = buf.read().decode("utf-8", errors="ignore")
        elif ext.endswith(".docx"):
            try:
                from docx import Document  # type: ignore
                d = Document(buf)
                text = "\n".join(p.text for p in d.paragraphs)
            except Exception:
                text = "(docx –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω –Ω–∞ —ç—Ç–æ–º —Ö–æ—Å—Ç–µ)"
        elif ext.endswith(".pdf"):
            try:
                import fitz  # PyMuPDF  # type: ignore
                docpdf = fitz.open(stream=buf.getvalue(), filetype="pdf")
                text = "\n".join(page.get_text() for page in docpdf)
            except Exception:
                text = "(pdf –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω –Ω–∞ —ç—Ç–æ–º —Ö–æ—Å—Ç–µ)"
        else:
            text = "(—Ñ–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω)"
        if text.strip():
            storage.add_message(chat_id, is_user=True, content=f"[–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç]\n{text[:4000]}")
            await msg.answer("–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç.", reply_markup=chat_inline_kb(chat_id, msg.from_user.id).as_markup())
        else:
            await msg.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞.")
    except Exception:
        await msg.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ.")
    finally:
        await state.clear()


@router.callback_query(F.data.startswith("chat:del:"))
async def cb_del(call: CallbackQuery):
    chat_id = int(call.data.split(":")[2])
    kb = InlineKeyboardBuilder()
    kb.button(text="‚ùå –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"chat:delok:{chat_id}")
    kb.button(text="‚¨Ö –û—Ç–º–µ–Ω–∞", callback_data=f"chat:open:{chat_id}")
    kb.adjust(2)
    await call.message.edit_text("–£–¥–∞–ª–∏—Ç—å —á–∞—Ç? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.", reply_markup=kb.as_markup())
    await call.answer()


@router.callback_query(F.data.startswith("chat:delok:"))
async def cb_delok(call: CallbackQuery):
    chat_id = int(call.data.split(":")[2])
    if storage.delete_chat(chat_id, call.from_user.id):
        kb = InlineKeyboardBuilder()
        kb.button(text="üìã –ú–µ–Ω—é", callback_data="chars:menu")
        kb.adjust(1)
        await call.message.edit_text("–ß–∞—Ç —É–¥–∞–ª—ë–Ω. –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º:", reply_markup=kb.as_markup())
    else:
        await call.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —á–∞—Ç.", reply_markup=chat_inline_kb(chat_id, call.from_user.id).as_markup())
    await call.answer()


# ------ –°–æ–æ–±—â–µ–Ω–∏—è (RP/Live) ------
async def _typing_loop(msg: Message, stop_evt: asyncio.Event):
    try:
        while not stop_evt.is_set():
            await msg.bot.send_chat_action(msg.chat.id, ChatAction.TYPING)
            await asyncio.sleep(4)
    except Exception:
        pass


def _try_slice(buf: str, *, min_first: int, max_chars: int) -> tuple[str | None, str]:
    # 1) –∞–±–∑–∞—Ü
    if "\n\n" in buf:
        head, tail = buf.split("\n\n", 1)
        return head.strip(), tail.lstrip()
    # 2) –∫–æ–Ω–µ—Ü –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    m = list(_SENT_SPLIT_RE.finditer(buf))
    if m and (len(buf) >= min_first):
        pos = m[-1].end()
        return buf[:pos].strip(), buf[pos:].lstrip()
    # 3) –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–≥–æ
    if len(buf) >= max_chars:
        return buf[:max_chars].rstrip(), buf[max_chars:].lstrip()
    return None, buf


@router.message(F.text & ~F.text.startswith("/"))
async def chatting_text(msg: Message):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç (–ø–æ—Å–ª–µ–¥–Ω–∏–π ¬´–æ—Ç–∫—Ä—ã—Ç—ã–π¬ª)
    last = storage.get_last_chat(msg.from_user.id)
    if not last:
        await msg.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞. –û—Ç–∫—Ä–æ–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π —á–∞—Ç.")
        return
    chat_id = int(last["id"])
    storage.touch_activity(msg.from_user.id)
    storage.add_message(chat_id, is_user=True, content=msg.text)
    storage.set_user_chatting(msg.from_user.id, True)  # <-- —Ñ–ª–∞–≥ ¬´–¥–∏–∞–ª–æ–≥ –Ω–∞—á–∞–ª—Å—è¬ª
    # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä ¬´–ø–µ—á–∞—Ç–∞–µ—Ç‚Ä¶¬ª
    stop = asyncio.Event()
    typer = asyncio.create_task(_typing_loop(msg, stop))

    try:
        mode = (last.get("mode") or "rp").lower()

        if mode == "live":
            full = ""
            buf = ""
            min_first = 120
            max_chars = 800

            async for ev in live_stream(msg.from_user.id, chat_id, msg.text):
                if ev["kind"] == "chunk":
                    buf += ev["text"]
                    piece, buf = _try_slice(buf, min_first=min_first, max_chars=max_chars)
                    if piece and piece.strip():
                        await msg.answer(piece)
                        full += (("\n" if full else "") + piece)
                elif ev["kind"] == "final":
                    if buf.strip():
                        await msg.answer(buf.strip())
                        full += (("\n" if full else "") + buf.strip())
                    usage_in = int(ev.get("usage_in") or 0)
                    usage_out = int(ev.get("usage_out") or 0)
                    cost_total = float(ev.get("cost_total") or 0)
                    storage.add_message(
                        chat_id,
                        is_user=False,
                        content=full,
                        usage_in=usage_in,
                        usage_out=usage_out,
                        usage_cost_rub=cost_total,
                    )
                    if int(ev.get("deficit") or 0) > 0:
                        await msg.answer("‚ö† –ë–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –Ω—É–ª–µ. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ.")
                                # –æ—Ç–≤–µ—Ç –≤ live –∑–∞–≤–µ—Ä—à—ë–Ω ‚Äî —Ç–µ–ø–µ—Ä—å —Å—Ç–∞—Ä—Ç—É–µ–º —Ç–∞–π–º–µ—Ä ¬´10 –º–∏–Ω—É—Ç —Ç–∏—à–∏–Ω—ã¬ª
                    schedule_silence_check(msg.from_user.id, chat_id, delay_sec=600)
        else:
            # RP: –æ–¥–∏–Ω –æ—Ç–≤–µ—Ç
            r = await chat_turn(msg.from_user.id, chat_id, msg.text)
            storage.add_message(
                chat_id,
                is_user=False,
                content=r.text,
                usage_in=r.usage_in,
                usage_out=r.usage_out,
                usage_cost_rub=r.cost_total,
            )
            await msg.answer(r.text)
            if r.deficit > 0:
                await msg.answer("‚ö† –ë–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –Ω—É–ª–µ. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ.")
            schedule_silence_check(msg.from_user.id, chat_id, delay_sec=600)
    finally:
        stop.set()
        try:
            await asyncio.wait_for(typer, timeout=0.1)
        except Exception:
            pass
        storage.set_user_chatting(msg.from_user.id, False)  # <-- –¥–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è