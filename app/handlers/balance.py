from __future__ import annotations
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery

from app import storage

router = Router(name="balance")

BTN_BALANCE = "üí∞ –ë–∞–ª–∞–Ω—Å"


def _balance_text(user_id: int) -> str:
    u = storage.get_user(user_id) or {}
    free_toki = int(u.get("free_toki") or 0)
    paid = int(u.get("paid_tokens") or 0)
    cache = int(u.get("cache_tokens") or 0)
    return (
        "<b>–ë–∞–ª–∞–Ω—Å</b>\n"
        f"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ç–æ–∫–∏: <code>{free_toki}</code>\n"
        f"–ü–ª–∞—Ç–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: <code>{paid}</code>\n"
        f"–ö—ç—à‚Äë—Ç–æ–∫–µ–Ω—ã: <code>{cache}</code>\n\n"
        "–î–æ—Å—Ç—É–ø–Ω–æ: /promo CODE ‚Äî –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥\n"
        "–ü–æ–ø–æ–ª–Ω–∏—Ç—å: /pay ‚Äî —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É (–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º)"
    )


async def _show_balance(message: Message, user_id: int, username: str | None = None):
    storage.ensure_user(user_id, username)
    await message.answer(_balance_text(user_id))


@router.message(Command("balance"))
@router.message(F.text == BTN_BALANCE)
async def cmd_balance(msg: Message):
    await _show_balance(msg, msg.from_user.id, msg.from_user.username or None)


@router.callback_query(F.data == "open_balance")
async def cb_open_balance(call: CallbackQuery):
    await _show_balance(call.message, call.from_user.id, call.from_user.username or None)
    await call.answer()
