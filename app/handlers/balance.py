from __future__ import annotations

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import CallbackQuery, Message

from app import storage

router = Router(name="balance")


def _balance_text(u: dict) -> str:
    return (
        "–ë–∞–ª–∞–Ω—Å:\n"
        f"–¢–æ–∫–∏ (free): <b>{u.get('free_toki') or 0}</b>\n"
        f"–¢–æ–∫–µ–Ω—ã (paid): <b>{u.get('paid_tokens') or 0}</b>\n\n"
        "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ‚Äî —á–µ—Ä–µ–∑ /pay (–ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–æ–∫–µ–Ω—ã –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã)."
    )


@router.message(Command("balance"))
async def cmd_balance(msg: Message):
    storage.ensure_user(msg.from_user.id, msg.from_user.username or None)
    u = storage.get_user(msg.from_user.id) or {}
    await msg.answer(_balance_text(u))


@router.message(F.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
async def btn_balance(msg: Message):
    await cmd_balance(msg)


@router.callback_query(F.data == "open_balance")
async def cb_open_balance(call: CallbackQuery):
    u = storage.get_user(call.from_user.id) or {}
    await call.message.answer(_balance_text(u))
    await call.answer()

