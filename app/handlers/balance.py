
from __future__ import annotations
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery

from app import storage

router = Router(name="balance")

BTN_BALANCE = "üí∞ –ë–∞–ª–∞–Ω—Å"


def _balance_text(user_id: int) -> str:
    u = storage.get_user(user_id) or {}
    free_toki = int(u.get("free_toki") or 0)
    paid = int(u.get("paid_tokens") or 0)
    cache = int(u.get("cache_tokens") or 0)
    return (
        "<b>–ë–∞–ª–∞–Ω—Å</b>\n"
        f"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ç–æ–∫–∏: <code>{free_toki}</code>\n"
        f"–ü–ª–∞—Ç–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: <code>{paid}</code>\n"
        f"–ö—ç—à‚Äë—Ç–æ–∫–µ–Ω—ã: <code>{cache}</code>\n\n"
        "–î–æ—Å—Ç—É–ø–Ω–æ: /promo CODE ‚Äî –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥\n"
        "–ü–æ–ø–æ–ª–Ω–∏—Ç—å: /pay ‚Äî —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É (–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º)"
    )
# app/handlers/balance.py
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message
from app import storage

router = Router(name="balance")


def _balance_text(u: dict) -> str:
    ops = storage.get_toki_log(int(u.get("tg_id")), limit=5)
    journal = ""
    if ops:
        journal_lines = [
            f"{r['created_at'][:16]} {r['meta'] or ''}: {int(r['amount'])}" for r in ops
        ]
        journal = "\n\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:\n" + "\n".join(journal_lines)
    return (
        "–ë–∞–ª–∞–Ω—Å:\n"
        f"–¢–æ–∫–∏ (free): <b>{u.get('free_toki') or 0}</b>\n"
        f"–¢–æ–∫–µ–Ω—ã (paid): <b>{u.get('paid_tokens') or 0}</b>\n\n"
        "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ‚Äî —á–µ—Ä–µ–∑ /pay (–ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–æ–∫–µ–Ω—ã –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã)."
        + journal
    )

@router.message(Command("balance"))
async def cmd_balance(msg: Message):
    storage.ensure_user(msg.from_user.id, msg.from_user.username or None)
    u = storage.get_user(msg.from_user.id) or {}
    await msg.answer(_balance_text(u))  # <-- –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ

# reply-–∫–Ω–æ–ø–∫–∞ "üí∞ –ë–∞–ª–∞–Ω—Å" –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.message(F.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
async def btn_balance(msg: Message):
    await cmd_balance(msg)



# –ï—Å–ª–∏ –≥–¥–µ-—Ç–æ –æ—Å—Ç–∞–ª–∏—Å—å –∏–Ω–ª–∞–π–Ω‚Äë–∫–Ω–æ–ø–∫–∏, –≤–µ–¥—É—â–∏–µ –∫ ¬´–±–∞–ª–∞–Ω—Å—É¬ª, ‚Äî –æ—Ç–≤–µ—á–∞–µ–º –ù–û–í–´–ú —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
@router.callback_query(F.data == "open_balance")
async def cb_open_balance(call: CallbackQuery):
    await call.message.answer(_balance_text(call.from_user.id))
    await call.answer()
