from __future__ import annotations

from aiogram import Router, F
from aiogram.filters import CommandStart, CommandObject
from aiogram.types import Message, ReplyKeyboardMarkup
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from app import storage

router = Router(name="user")


def main_menu_kb(user_id: int) -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardBuilder()
    # –ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞: –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å (–ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Ç)
    kb.button(text="‚ñ∂ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ –¥–≤–µ –≤ —Ä—è–¥
    kb.button(text="üé≠ –ü–µ—Ä—Å–æ–Ω–∞–∂–∏")
    kb.button(text="üí¨ –ú–æ–∏ —á–∞—Ç—ã")
    kb.button(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")
    kb.button(text="üí∞ –ë–∞–ª–∞–Ω—Å")
    kb.adjust(1, 2, 2)
    return kb.as_markup(resize_keyboard=True)


@router.message(CommandStart(deep_link=True))
async def start_deeplink(msg: Message, command: CommandObject | None = None):
    storage.ensure_user(msg.from_user.id, msg.from_user.username or None, default_tz_min=180)
    payload = (command.args or "").strip() if command else ""
    if payload.startswith("char_"):
        try:
            char_id = int(payload.split("_", 1)[1])
        except Exception:
            char_id = 0
        if char_id:
            from app.handlers.characters import open_character_card
            await open_character_card(msg, char_id=char_id, as_new_message=True)
            return
    await msg.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=main_menu_kb(msg.from_user.id))


@router.message(CommandStart())
async def start_plain(msg: Message):
    storage.ensure_user(msg.from_user.id, msg.from_user.username or None, default_tz_min=180)
    await msg.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!", reply_markup=main_menu_kb(msg.from_user.id))


@router.message(F.text == "‚ñ∂ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
async def continue_last(msg: Message):
    last = storage.get_last_chat(msg.from_user.id)
    if not last:
        await msg.answer("–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤. –û—Ç–∫—Ä–æ–π—Ç–µ ¬´–ü–µ—Ä—Å–æ–Ω–∞–∂–∏¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
        return
    from app.handlers.chats import open_chat_inline
    await open_chat_inline(msg, chat_id=int(last["id"]))


@router.message(F.text == "üé≠ –ü–µ—Ä—Å–æ–Ω–∞–∂–∏")
async def to_characters(msg: Message):
    from app.handlers.characters import characters_menu
    await characters_menu(msg)


@router.message(F.text == "üí¨ –ú–æ–∏ —á–∞—Ç—ã")
async def to_chats(msg: Message):
    from app.handlers.chats import list_chats
    await list_chats(msg, page=1)


@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def to_profile(msg: Message):
    from app.handlers.profile import show_profile
    await show_profile(msg)


@router.message(F.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
async def to_balance(msg: Message):
    from app.handlers.profile import cb_balance

    class FakeCall:
        from_user = msg.from_user
        message = msg

    await cb_balance(FakeCall())  # –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–ª–ª–±–µ–∫
