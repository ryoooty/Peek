from __future__ import annotations

from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message

from app import storage
from app.config import settings

router = Router(name="payments")


@router.message(Command("pay"))
async def cmd_pay(msg: Message):
    txt = (
        "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:\n\n"
        "1) Boosty ‚Äî –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –ª—é–±—É—é —Å—É–º–º—É –∏ –ø—Ä–∏—à–ª–∏—Ç–µ /confirm <—Å—É–º–º–∞>.\n"
        "2) DonationAlerts ‚Äî —Ç–æ –∂–µ —Å–∞–º–æ–µ.\n\n"
        "–ü–æ—Å–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω—ã –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã. –ö—É—Ä—Å –∏ –¥–µ—Ç–∞–ª–∏ ‚Äî —É –∞–¥–º–∏–Ω–∞."
    )
    await msg.answer(txt)


@router.message(Command("confirm"))
async def cmd_confirm(msg: Message):
    parts = (msg.text or "").split(maxsplit=1)
    if len(parts) < 2:
        return await msg.answer("–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É: /confirm 150")
    try:
        amount = float(parts[1].replace(",", "."))
    except Exception:
        return await msg.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞.")
    tid = storage.create_topup_pending(msg.from_user.id, amount, provider="manual")
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
    note = f"–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ #{tid}\nUser: {msg.from_user.id}\n–°—É–º–º–∞: {amount}"
    for admin_id in settings.admin_ids:
        try:
            await msg.bot.send_message(admin_id, note)
        except Exception:
            pass
    await msg.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –°–ø–∞—Å–∏–±–æ!")


@router.message(Command("approve"))
async def cmd_approve(msg: Message):
    if msg.from_user.id not in settings.admin_ids:
        return
    parts = (msg.text or "").split()
    if len(parts) < 2:
        return await msg.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /approve <topup_id>")
    try:
        tid = int(parts[1])
    except Exception:
        return await msg.answer("–ù–µ–≤–µ—Ä–Ω—ã–π id.")
    ok = storage.approve_topup(tid, msg.from_user.id)
    await msg.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞" if ok else "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–¥–æ–±—Ä–∏—Ç—å.")


@router.message(Command("decline"))
async def cmd_decline(msg: Message):
    if msg.from_user.id not in settings.admin_ids:
        return
    parts = (msg.text or "").split()
    if len(parts) < 2:
        return await msg.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /decline <topup_id>")
    try:
        tid = int(parts[1])
    except Exception:
        return await msg.answer("–ù–µ–≤–µ—Ä–Ω—ã–π id.")
    ok = storage.decline_topup(tid, msg.from_user.id)
    await msg.answer("üö´ –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞" if ok else "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å.")
